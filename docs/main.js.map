{"version":3,"sources":["./src/app/blogs/super-wifi-article/super-wifi-article.component.ts","./src/app/blogs/super-wifi-article/super-wifi-article.component.html","./src/app/blogs/ang-mat-dialog/ang-mat-dialog.component.ts","./src/app/blogs/ang-mat-dialog/ang-mat-dialog.component.html","./src/app/test-dialog/test-dialog.component.ts","./src/app/test-dialog/test-dialog.component.html","./src/app/test-product-component/test-product.component.ts","./src/app/test-product-component/test-product.component.html","./src/app/nav-bar/nav-bar.component.ts","./src/app/nav-bar/nav-bar.component.html","./src/environments/environment.ts","./src/app/blogs/ang-directive/ang-directive.component.ts","./src/app/blogs/ang-directive/ang-directive.component.html","./src/app/blogs/aspnet-uiajax/aspnet-uiajax.component.ts","./src/app/blogs/aspnet-uiajax/aspnet-uiajax.component.html","./src/app/home-page/home-page.component.ts","./src/app/home-page/home-page.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/footer/footer.component.ts","./src/app/footer/footer.component.html","./src/app/progress-spinner-dialog/progress-spinner-dialog.component.ts","./src/app/progress-spinner-dialog/progress-spinner-dialog.component.html","./src/app/auto-focus.directive.ts","./src/app/blogs/ang-test-jest/ang-test-jest.component.ts","./src/app/blogs/ang-test-jest/ang-test-jest.component.html","./src/app/blogs/asp-net-auth-identity/asp-net-auth-identity.component.ts","./src/app/blogs/asp-net-auth-identity/asp-net-auth-identity.component.html","./src/app/angular-material.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-super-wifi-article',\n  templateUrl: './super-wifi-article.component.html',\n  styleUrls: ['./super-wifi-article.component.scss', '../ang-mat-dialog/ang-mat-dialog.component.scss']\n})\nexport class SuperWifiArticleComponent implements OnInit {\n\n  pageId = \"/blog3\"\n\n  constructor() { \n    this.loadScripts();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n     'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    Information Technology Article\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        What is Microsoft's Super Wi-Fi and How Could Super Wi-fi Affect Rural Life ?\n                    </h1>\n                </div>\n\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis Shrestha\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                            Dec 05 &nbsp; 2021\n                        </div>\n                    </div>  \n                </div>\n\n            </div>\n        </div>\n    </div>\n\n    <div class=\"article-content\">\n        <div class=\"header-center\">\n            <p class=\"article-paragraph\">\n                In the modern world, life without internet is practically impossible. \n                We live in a world where high-speed internet is now more than necessary. \n                Our daily-life tasks from navigating a local address, socializing with friends and families globally and locally, taking a college or school courses, self-learning, researching for news and streaming online videos, all these tasks are dependent to an internet access. \n                The world is consistently interconnected through the development of new technologies and high-speed communication such as smart phones, and wireless internet access. \n                Yet, majority of people in the world do not have access to the internet. As a result, technology companies are now exploring a way to connect the whole world to the internet, by development of hot air balloons, drones and constellations of mini-satellites. \n                While these ideas are an effective way to get the whole world online, without having to worry of being outside the range of Wi-Fi connection, these are all long-term, expensive plans and will take longer to achieve.\n            </p>\n\n            <div class=\"article-img\">\n                <img src=\"assets/blog-3.1.jpg\" style=\"width: 100%;\" alt=\"dialog box\" role=\"presentation\">\n            </div>\n\n            <p class=\"article-paragraph\">\n                Fortunately, for the time being, the tech giant, Microsoft’s plan of harnessing Television White Channels (TVWC) to deliver high-speed broadband internet connection could make millions of life easier in the rural areas of USA and eventually in developing countries worldwide who are lacking broadband internet connection today. \n                In addition to the high-speed internet access, the convenience of not having to worry about being outside the Wi-Fi zone would be the excitement that we could get from “Super Wi-Fi”, as this new technology has a potential to cover an area about 100 times more the diameter of a normal Wi-Fi.\n            </p>\n\n            <p class=\"article-paragraph\">\n                First, let me explain what “white spaces” mean and how we can utilize them to produce broadband internet connection. The white spaces are radio waves in the electromagnetic spectrum that are unused. \n                “The electromagnetic spectrum is the range of all possible frequencies of electromagnetic radiation” (Moshirnia, 2012). \n                This is important because most of the devices that we use today, from smartphones to television to car remotes, all uses frequencies in the spectrum in order to communicate wireless signals (2012). \n                One of the waves in the electromagnetic spectrum is the radio waves, and other constitute of visible lights, microwaves, infrared radiation, X-rays and gamma rays. Radio waves are best used to communicate information. Communication mediums such as television, radios and cell phones all communicate sound, that is transmitted by the station by converting the radio waves to mechanical vibration to create sound waves that can be heard (Lucas, 2015). The lower frequencies in the electromagnetic spectrum provide better results in communicating signals. This means that the lower frequency waves have higher range as it can penetrate through buildings and environment surroundings more easily than that of higher frequency waves.\n            </p>\n\n            <p class=\"article-paragraph\">\n                The bands of frequency in the spectrum are allocated for specific purpose in order to prevent interference within the spectrum. \n                Similarly, television broadcasting is allocated bands between 54 and 806 MHz, and each broadcaster is assigned license to channels within the spectrum (Moshirnia, 2012). \n                The white channels are the gaps between the TV channels that are allocated to make sure that the channels do not interfere with one another. \n                These allocated but not used channels are referred to as “white channels”. There are plenty of these white spaces, or unused channels simply because not all the channels are actually used in the market. \n                And this is even more prevalent in rural areas as broadcasters choose not to provide service in the communities with less population because they don’t see any profit in the rural area (2012).\n            </p>\n\n            <p class=\"article-paragraph\">\n                These unused spectrum or white spaces were first provided by US government to public without requiring license to use for the devices specifically such as garage door openers and microwave ovens. \n                Later, this release introduced the wirelessly connecting electronic devices, Wi-Fi. \n                Today, Wi-Fi along with several other devices such as microwaves, security cameras, and cordless phones uses the unlicensed high bands of the spectrum that runs in the frequency of 2.4 GHz and 5 GHz (2012).\n            </p>\n\n            <p class= \"article-paragraph\">\n                Now that we have an idea of what the white channels are, and how it can provide high-speed internet access to large range area than a normal Wi-Fi, I will explain how the Super Wi-Fi work. The main component of this system is the location-aware devices and online databases. The access of Super Wi-Fi will use a geographic internet-databases to get the available networks in the spectrum. \n                “The database has a list of all protected TV stations and frequencies across the country” (Microsoft). \n                To prevent interference with the existing TV channels, implementation of Super Wi-Fi networks is accessed through radio-enabled devices, which will report the device’s location to the database. \n                In return, the database will provide the list of all available white channels that can be used in its current location. And, if the frequency is unused, the device will use that frequency to communicate (Microsoft). This will mean that Microsoft plan to utilize white space will require devices that would use geographical databases to prevent interference with licensed TV broadcasters within a frequency band. This process operates in a lower frequency channels than that of normal Wi-Fi which enables a much larger range and consistent signal.\n            </p>\n\n            <p class=\"article-paragraph\">\n                Who will benefit from this promising new technology? “Some of the most immediate beneficiaries will be people currently living in the areas that cannot be affordably reached with existing technologies”. The modern world is increasingly globalized through the means of high-speed communications. \n                Yet, almost two thirds of the world’s population lack access to an internet connection (Microsoft). \n                Super Wi-Fi has the potential to make the internet easily accessible to these areas as it has potential to transmit signals to very large areas, and make it affordable so that most of the people can use. \n                Internet access in these areas will also mean improvement in the healthcare, education, and business areas, contributing to the development of a nation. \n                Moreover, people in the areas that lack internet can share their resources that are valuable to us which will mean benefit to the world. Super Wi-Fi has a potential to globalize the world in a much easier way than that of regular Wi-Fi.\n            </p>\n\n            <div class=\"article-img2\">\n                <img src=\"assets/blog-3.2.png\"  style=\"width: 100%;\" alt=\"dialog box\" role=\"presentation\">\n            </div>\n\n            <p class= \"article-paragraph\">\n                Even in the city areas, the introduction of this technology will mean the greater efficiency of broadband internet access as it can transmit signal to much larger areas with the same power and computing requirements than that of regular Wi-Fi. \n                “The regular Wi-Fi routers have an indoor range of 30 to 50 meters”. While the super Wi-Fi networks has the capability to broadcast signals at the same power level to a radius of 10 kilometers, or more than 6 miles (Enis, 2017). \n                This would mean more benefits to consumer as the cost of providing internet access will reduce significantly since internet providers can cover much larger range of customers with one base station which would mean that a whole community can be connected through use of just one base. This can also be cost effective in one way that the extra cost that most of us are paying these days to phone service providers for the LTE or 3G networks so that we can access broadband internet access outside our home or campus would be eliminated.\n            </p>\n\n            <p class= \"article-paragraph\">\n                Furthermore, the main issues of the already present Wi-Fi networks is that the technologies and business models that work well for delivering access to urban areas might not work well for delivering access to rural areas. \n                The normal Wi-Fi is really weak mostly because it runs in higher frequency and the signals cannot be transmitted against concrete obstruction. \n                And as rural areas has most complex geographical structures, this has resulted to approximately 39 percent of rural Americans that lack access to broadband connections (Ernis, 2017). \n                Thankfully, rural areas are particularly more suited to the use of Super Wi-Fi because there are less wireless and media markets present in less populated area. This means that there are large availability of unused channels in the spectrum that can be utilized for internet access, with less conflict because more unused frequencies are available. The opportunity of getting people online in rural areas would also mean the development of those areas, since there are more than handful of resources that we can get online; such as education resources, online news, and new ideas, are only some of the productive things that are found in the internet.\n            </p>\n\n            <p class=\"article-paragraph\">\n                Lastly, I will discuss the benefit of introducing super Wi-Fi to the tech companies. \n                Promoting the white-spaces technology not only benefits to the public, but it has an enormous potential to reap rewards for tech companies. \n                “The remaining 24.3 million people in rural areas without internet are potential customers of cloud applications, search and other digital services” (Kang, 2017). \n                Providing broadband internet access to these people, and in developing countries would also mean that these people will use the online digital services such as music subscription, online news and movies subscription. In addition, these people are also potential online customers of the shopping companies such as Amazon, E-bay etc. This will generate huge income for these companies.\n            </p>\n\n            <p class= \"article-paragraph\">\n                The potential benefits of super Wi-Fi certainly seem to outweigh the benefits of regular Wi-Fi. \n                However, the technology also faces numerous challenges along its way to connect the world. Several groups such as television broadcasters, and others who uses unlicensed white channels for communicating through wireless microphones such as church groups’ theater troupes and sport referees argue that the use of white spaces will interfere with their signals (Moshirnia, 2012). \n                But, Federal Communications Commission has ensured the protection from interferences by maintaining of databases containing the frequencies of all licensed TV band in each geographical location. While this problem seem to have resolved, there are several other challenges that the technology is facing. One of the major challenges is that availability of devices in order to catch the white channel signals. There are only few companies that manufacture devices that is compatible with white-spaces technology, and consequently these devices are expensive, i.e. it costs more than $1000 each (Kang, 2017). The reason for this expensive cost seem to be that manufacturers are still not sure of profitability that they can make in rural areas (2017).\n            </p>\n\n            <p class= \"article-paragraph\">\n                This emerging technology has many potential, to contribute to globalization and possibly benefiting everyone including public, tech companies and development of a nation. \n                But, this idea has now been in the technology market for a while now, and Microsoft has been planning to introduce this technology for well over a decade. \n                Thus, there might be still some time before we see the market of this technology world-wide. The goal of Microsoft is not to become a telecom provider, but their plan is to invest in the capital costs and work with local internet service providers in rural places to experiment the benefits of the technology (Kang, 2017). While there are other technology companies such as google, who is also working to make this project successful, we can only hope this idea will be available in the market sooner.\n            </p>\n\n            <p class=\"article-paragraph\">\n                <strong>References</strong> <br><br>\n\n                Enis, M. (2017). WhiteSpace project could grow rural broadband access. Library Journal. Retrieved from http://lj.libraryjournal.com/2017/01/industry-news/whitespace-project-could-grow-rural-broadband-access/#_ <br><br>\n\n                Kang, C. To close digital divide, Microsoft to harness unused television channels. The New York Times. Retrieved from https://www.nytimes.com/2017/07/11/technology/to-close-digital-divide-microsoft-to-harness-unused-television-channels.html <br><br>\n\n                Lucas, J. (2015). What are radio waves? Live Science. Retrieved from https://www.livescience.com/50399-radio-waves.html <br><br>\n\n                Moshirnia, A.V. (2012). Whither white spaces? Infrastructure, 51(2), 3-4. Retrieved from libpublic3.library.isu.edu/login?url=http://search.ebscohost.com/login.aspx?direct=true&db=a9h&AN=75122337&site=ehost-live. <br><br>\n\n                n.d. Super wi-fi technologies. Microsoft. Retrieved from https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/spectrum-microsoft-super-wifi-overview.pdf <br><br>\n            </p>\n\n        </div>\n        \n    </div>\n\n    <div class=\"comments\">\n        <disqus [identifier]=\"pageId\"></disqus>\n    </div>\n\n</article>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-ang-mat-dialog',\n  templateUrl: './ang-mat-dialog.component.html',\n  styleUrls: ['./ang-mat-dialog.component.scss']\n})\nexport class AngMatDialogComponent implements OnInit {\n\n  pageId=\"/blog1\"\n\n  snippet = `\n  import { Component, Inject } from '@angular/core';\n  import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n  import { Hero } from '../test-product-component/test-product.component';\n\n  @Component({\n    selector: 'app-test-dialog',\n    templateUrl: './test-dialog.component.html',\n    styleUrls: ['./test-dialog.component.scss']\n  })\n  export class TestDialogComponent {\n\n    // vars to store radio button selection\n    legendStatusSelection = null;\n    popularitySelection = null;\n\n    constructor(\n      public dialogRef: MatDialogRef<TestDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: HeroActionDialogData\n    ) { }\n\n    onNoClick(): void {\n      this.dialogRef.close();\n    }\n\n  }\n `;\n \n snippet1 = `\n  export interface Hero {\n      id: string;\n      name: string;\n      Rating: string;\n      Legend: boolean;\n      Popularity: string;\n  }\n\n  export interface HeroActionDialogData{\n    legend: boolean;\n    popularity: string;\n  }\n `\n\n snippet2 = `\n <div mat-dialog-content>\n\n    <div fxLayout fxLayoutGap = \"1%\">\n        <mat-radio-group [(ngModel)]=\"legendStatusSelection\">\n\n            <mat-radio-button class=\"radio-button\" [value] = \"false\" *ngIf=\"data.legend\">\n                Set Hero Legend Status to False\n            </mat-radio-button>\n\n            <mat-radio-button class=\"radio-button\" [value] = \"true\" *ngIf=\"!data.legend\">\n                Set Hero Legend Status to True\n            </mat-radio-button>\n\n        </mat-radio-group>\n\n        <mat-radio-group [(ngModel)]=\"popularitySelection\">\n\n        <mat-radio-button class=\"radio-button\" [value] = \"false\" *ngIf=\"data.popularity == 'high'\">\n            Set Hero Popularity to Low\n        </mat-radio-button>\n\n        <mat-radio-button class=\"radio-button\" [value] = \"true\" *ngIf=\"data.popularity == 'low'\">\n            Set Hero Popularity to High\n        </mat-radio-button>\n\n        </mat-radio-group>\n    </div>\n\n</div>\n\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onNoClick()\">Close</button>\n    <button mat-button [mat-dialog-close]=\"\" cdkFocusInitial>Ok</button>\n\n</div>\n`\n\nsnippet3 = `\n  import { FormsModule } from '@angular/forms';\n\n`\n\nsnippet4 = `\nopenActionDialog(tableRow: Hero){\n  console.log(\"Hello\");\n  \n  const dialogRef = this.dialog.open(TestDialogComponent, {\n    width: '250px',\n    data:{\n      legend: tableRow.legend,\n      popularity: tableRow.popularity\n    },\n    position: {\n      left: '70%',\n      bottom: '35%'\n    }\n  });\n\n  dialogRef.afterClosed().subscribe(async result => {\n\n    if (result != null){\n      await this.editHeroLegendPopularityStatus(result, tableRow);\n    }\n    console.log(result);\n  });\n}\n\nasync editHeroLegendPopularityStatus(result: any, heroRow: Hero){\n  let dialogRef: MatDialogRef<ProgressSpinnerDialogComponent> = this.dialog.open(ProgressSpinnerDialogComponent, {\n    panelClass: 'spinner-container',\n    disableClose: true\n  });\n\n  try{\n    if (result.legend != null) {\n      heroRow.legend = result.legend;\n    }\n\n    if (result.popularity != null) {\n      let popularity = result.popularity? 'high' : 'low';\n      heroRow.popularity = popularity;\n    }\n\n    dialogRef.close();\n    console.log(\"Flag updated\");\n\n    this.changeDetectorRefs.detectChanges();\n    \n  } catch (error) {\n    dialogRef.close();\n    console.log(\"Error occured!\");\n\n  }\n}\n`\n\nsnippet5 = `\n  [mat-dialog-close]=\"{ legend: legendStatusSelection, popularity: popularitySelection }\" \ncdkFocusInitial\n\n`\n\nsnippet6 = `\n  <mat-radio-button class=\"radio-button\" [value] = \"false\" *ngIf=\"data.popularity == 'high'\">\n  <mat-radio-button class=\"radio-button\" [value] = \"true\" *ngIf=\"!data.legend\">\n`\n\nsnippet7 = `\ndialogRef.afterClosed().subscribe(async result => {\n\n  if (result != null){\n    await this.editHeroLegendPopularityStatus(result, tableRow);\n  }\n  console.log(result);\n});\n`\n\n  constructor(private title: Title) { \n    this.title.setTitle('Blogs | Angular Material Dialog Box to edit table data')\n    this.loadScripts();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n     'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    Angular tutorial\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        Building a dialog box to edit table row data with Angular Material Components\n                    </h1>\n                </div>\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis Shrestha\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n    \n        </div>\n\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <p class=\"article-paragraph\">\n                    This <i>Angular 10 Material Dialog to Edit table row</i> tutorial shows you how we can use the Angular Material Dialog component \n                    to build a reusable UI for an Edit operations on a table data. \n                </p>\n                <p class=\"article-paragraph\">\n                    It provides an introduction to concepts required to transfer data \n                    between components and MatDialog box. You will learn about MatDialogRef, MAT_DIALOG_DATA and MatDialogConfig.\n                </p>\n                <p class=\"article-header\">\n                    What you'll build\n                    \n                </p>\n\n                <p class=\"article-paragraph\">\n                    View the <a routerLink=\"/test-table\" routerLinkActive=\"active\" class=\"home\">DEMO</a> and test the feature you are going to build.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    We have a data table with a list of heroes. As we can see in the picture below, we have action column for each row with a button. \n                </p>\n\n                <div class=\"article-img\">\n                    <img src=\"assets/3.png\" alt=\"dialog box\" style=\"width: 100%;  height: 80%;\"role=\"presentation\">\n                </div>\n\n                <p class=\"article-paragraph\">\n                    When the button is clicked, it will display us the dialog box for action to take for our Heroes. It has radio button for user selection which will allow us to modify hero properties. \n                    If the Hero Legend status is true then dialog box will have option to set the status as false, and vice-versa. And same for popularity property of hero.\n                </p>\n\n                <div class=\"article-img\">\n                    <img src=\"assets/2.png\" alt=\"dialog box\" style=\"width: 100%; height: 80%;\" role=\"presentation\">\n                </div>\n\n                <p class=\"article-paragraph\">\n                    After a radio selection is made and clicking OK. The dialog box will close and our table will update with new data. \n                    We can either modify both Legend and Popularity of Hero or just one of them.\n                </p>\n\n                <div class=\"article-img\">\n                    <img src=\"assets/1.png\" alt=\"dialog box\" width=\"100%\" height=\"80%\" role=\"presentation\">\n                </div>\n                \n\n                <p class=\"article-header\">\n                    Let's get started\n                </p>\n\n                <p class=\"article-paragraph\">\n                    For this tutorial, we will make things simpler and make use of mock data and service to perform back-end tasks. \n                </p>\n                \n                <p class=\"article-paragraph\">\n                    The model for data table is given below. We have Hero interface for displaying list of heroes in the table. \n                    And the <strong>HeroActionDialogData</strong> is to transfer data between the table and dialog box to edit Heroes.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet1}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Our main task is to be able to add an action button to our heroes table. The action button should allow us to set each hero's legend status as true/false and popularity as high/low.\n                    <br><br> In our dialog box template, we will display options as radio button for users to edit a table data. We will get the information from table and make use of MAT SELECT. <br><br>\n                    After getting the model ready, we will generdate a new component for our dialog box. <br>\n\n                    <code class=\"inline-code\">ng g c hero-action-dialog</code> The CLI creates a new folder, src/app/hero-action-dialog/, and generates the three files of the component. \n                    <br><br> Let's start by modifying the hero-action-dialog.component.ts file first. Our file will look like this:\n\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">    \n                       {{snippet}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    In the constructor we are using <code class=\"inline-code\">@Inject(MAT_DIALOG_DATA) public data: Hero</code>. \n                    It allows us to get data from the table to modify when we click the action button in mat-table. We get data as HeroActionDialogData. \n\n                </p>\n\n\n                <p class=\"article-paragraph\">\n                    As mentioned, we will add Material Dialog component. It comes with features like mat-dialog-title, mat-dialog-content, mat-dialog options which makes easier to create the template.  \n                    You can find the official tutorial <a href=\"https://material.angular.io/components/dialog/overview\">here</a> \n                    \n                    <br><br> We are using radio button in our dialog box to get the selection from user. To bind the selected value we have to use [ngModel]. \n                    So we need to <code>{{snippet3}}</code> in app.module.ts. In reviewing the template file for our dialog box, we can see that we are binding radio selection to pass value as true or false.\n                    \n                    <br>\n                    <br> The HTML template for the dialog box will look like below:\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">    \n                       {{snippet2}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Now that our component for action dialog box is ready. \n                    It is time to update the component that we want to edit the product data from Mat-table.  \n                    We need to add the method in our ProductComponent which we will call when the action button is clicked. This method will edit legend and popularity of a hero.\n                    \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                        {{snippet4}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    As we can see, <strong>editHeroLegendPopularityStatus</strong> method will take the table row when action button is clicked from Heroes list.\n                    It will open the TestDialogComponent which is our dialog box component with applied styles and position.\n                    <br> <br> It passes the data as HeroActionDialogData which will be recieved in the <strong>TestDialogComponent</strong> constructor. Then based on this data, we will display options in our action dialog box.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    The next step will be to get users selection from the dialog box when Ok button is clicked. We will get user selections from the TestDialogComponent template.\n                    <code class=\"inline-code\">{{snippet5}}</code> \n                    <br> <br> Here, we are passing legendStatusSelection (which we are passing radio button value as true if user selects true and vice versa) and popularitySelection (true for high and false for low)\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                        {{snippet6}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    When OK is pressed, below method will run\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                        {{snippet7}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    This method will check if user has made any selection. If user has selected legend to set as true then it will update the hero legend property in the mat-table.\n                    After the table is updated we are using ChangeDetectorRef Module from Angular to reset the table.\n                    <br> <br> As mentioned before, we are not using any back-end for this tutorial and so the mock-data is modified temporarily. \n                </p>\n                \n                \n            </div>\n\n        </div>\n\n        <div class=\"comments\">\n            <disqus [identifier]=\"pageId\"></disqus>\n        </div>\n\n    </div>\n    \n</article>\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Hero, HeroActionDialogData } from '../test-product-component/test-product.component';\n\n@Component({\n  selector: 'app-test-dialog',\n  templateUrl: './test-dialog.component.html',\n  styleUrls: ['./test-dialog.component.scss']\n})\nexport class TestDialogComponent {\n\n  legendStatusSelection = null;\n\n  popularitySelection = null;\n\n  constructor(\n    public dialogRef: MatDialogRef<TestDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: HeroActionDialogData\n  ) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div mat-dialog-content>\n\n    <div fxLayout fxLayoutGap = \"1%\" class=\"legend-action-content\">\n        <mat-radio-group [(ngModel)]=\"legendStatusSelection\">\n\n            <mat-radio-button class=\"radio-button\" [value] = \"false\" *ngIf=\"data.legend\">\n                Set Hero Legend Status to False\n            </mat-radio-button>\n\n            <mat-radio-button class=\"radio-button\" [value] = \"true\" *ngIf=\"!data.legend\">\n                Set Hero Legend Status to True\n            </mat-radio-button>\n\n        </mat-radio-group>\n\n        <mat-radio-group class=\"popularity-radio\" [(ngModel)]=\"popularitySelection\">\n\n            <mat-radio-button class=\"radio-button\" [value] = \"false\" *ngIf=\"data.popularity == 'high'\">\n                Set Hero Popularity to Low\n            </mat-radio-button>\n\n            <mat-radio-button class=\"radio-button\" [value] = \"true\" *ngIf=\"data.popularity == 'low'\">\n                Set Hero Popularity to High\n            </mat-radio-button>\n\n        </mat-radio-group>\n    </div>\n\n</div>\n\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onNoClick()\">Close</button>\n    <button mat-button \n    [mat-dialog-close]=\"{ legend: legendStatusSelection, popularity: popularitySelection }\" \n    cdkFocusInitial>Ok</button>\n\n</div>","import { AfterViewInit, ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ProgressSpinnerDialogComponent } from '../progress-spinner-dialog/progress-spinner-dialog.component';\nimport { TestDialogComponent } from '../test-dialog/test-dialog.component';\n\n@Component({\n  selector: 'app-test-product-component',\n  templateUrl: './test-product.component.html',\n  styleUrls: ['./test-product.component.scss']\n})\nexport class TestProductComponent implements AfterViewInit {\n\n  displayedColumns: string[] = ['id', 'name', 'rating', 'legend', 'popularity', 'action'];\n  dataSource = new MatTableDataSource<Hero>(HERO_DATA);\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(private dialog: MatDialog, private changeDetectorRefs: ChangeDetectorRef){\n\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  openActionDialog(tableRow: Hero){\n    console.log(\"Hello\");\n    \n    const dialogRef = this.dialog.open(TestDialogComponent, {\n      width: '250px',\n      data:{\n        legend: tableRow.legend,\n        popularity: tableRow.popularity\n      },\n      position: {\n        left: '70%',\n        bottom: '35%'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(async result => {\n\n      if (result != null){\n        await this.editHeroLegendPopularityStatus(result, tableRow);\n      }\n      console.log(result);\n    });\n  }\n\n  async editHeroLegendPopularityStatus(result: any, heroRow: Hero){\n    let dialogRef: MatDialogRef<ProgressSpinnerDialogComponent> = this.dialog.open(ProgressSpinnerDialogComponent, {\n      panelClass: 'spinner-container',\n      disableClose: true\n    });\n\n    try{\n      if (result.legend != null) {\n        heroRow.legend = result.legend;\n      }\n\n      if (result.popularity != null) {\n        let popularity = result.popularity? 'high' : 'low';\n        heroRow.popularity = popularity;\n      }\n\n      dialogRef.close();\n      console.log(\"Flag updated\");\n\n      this.changeDetectorRefs.detectChanges();\n      \n    } catch (error) {\n      dialogRef.close();\n      console.log(\"Error occured!\");\n\n    }\n  }\n\n}\n\nexport interface Hero {\n  id: number;\n  name: string;\n  rating: number;\n  legend: boolean;\n  popularity: string;\n}\n\nexport interface HeroActionDialogData{\n  legend: boolean;\n  popularity: string;\n}\n\nconst HERO_DATA: Hero[] = [\n  {id: 1, name: 'Dr Nice', rating: 88, legend: false, popularity: \"high\"},\n  {id: 2, name: 'Narco', rating: 92, legend: true, popularity: \"high\"},\n  {id: 3, name: 'Bombasto', rating: 65, legend: false, popularity: \"low\"},\n  {id: 4, name: 'Celeritas', rating: 77, legend: false, popularity: \"low\"},\n  {id: 5, name: 'Magneta', rating: 89, legend: false, popularity: \"high\"},\n  {id: 6, name: 'Rubberman', rating: 90, legend: false, popularity: \"high\"},\n  {id: 7, name: 'Dynama', rating: 60, legend: true, popularity: \"low\"},\n  {id: 8, name: 'Dr IQ', rating: 65, legend: false, popularity: \"low\"},\n  {id: 9, name: 'Magma', rating: 71, legend: true, popularity: \"high\"},\n  {id: 10, name: 'Mr Tomcat', rating: 74, legend: true, popularity: \"high\"},\n  {id: 11, name: 'Tornado', rating: 77, legend: true, popularity: \"high\"},\n];\n\n  \n\n\n\n","<div class=\"mat-elevation-z8\" >\n    <table mat-table [dataSource]=\"dataSource\">\n  \n      <!-- Position Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> No. </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n      </ng-container>\n  \n      <!-- Weight Column -->\n      <ng-container matColumnDef=\"rating\">\n        <th mat-header-cell *matHeaderCellDef> Rating </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.rating}} </td>\n      </ng-container>\n  \n      <!-- Symbol Column -->\n      <ng-container matColumnDef=\"legend\">\n        <th mat-header-cell *matHeaderCellDef> Legend </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.legend}} </td>\n      </ng-container>\n\n       <!-- Symbol Column -->\n       <ng-container matColumnDef=\"popularity\">\n        <th mat-header-cell *matHeaderCellDef> Popularity </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.popularity}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>Action</th>\n        <td mat-cell *matCellDef=\"let element\">\n          <mat-icon (click)=\"openActionDialog(element)\">more_vert</mat-icon>\n        </td>\n      </ng-container>\n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n  \n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\"\n                   showFirstLastButtons \n                   aria-label=\"Select page of heroes\">\n    </mat-paginator>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.scss']\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"toolbar\" role=\"banner\" style=\"height: 120px;\">\n    \n    <a routerLink=\"/home\" routerLinkActive=\"active\" class=\"home\">HOME</a>\n    <span class=\"welcome\">Welcome Readers</span>\n\n      <div class=\"spacer\"></div>\n      <a aria-label=\"Me on twitter\" target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/elvis_shrestha\" title=\"Twitter\">\n        <svg id=\"twitter-logo\" height=\"24\" data-name=\"Logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\">\n          <rect width=\"400\" height=\"400\" fill=\"none\"/>\n          <path d=\"M153.62,301.59c94.34,0,145.94-78.16,145.94-145.94,0-2.22,0-4.43-.15-6.63A104.36,104.36,0,0,0,325,122.47a102.38,102.38,0,0,1-29.46,8.07,51.47,51.47,0,0,0,22.55-28.37,102.79,102.79,0,0,1-32.57,12.45,51.34,51.34,0,0,0-87.41,46.78A145.62,145.62,0,0,1,92.4,107.81a51.33,51.33,0,0,0,15.88,68.47A50.91,50.91,0,0,1,85,169.86c0,.21,0,.43,0,.65a51.31,51.31,0,0,0,41.15,50.28,51.21,51.21,0,0,1-23.16.88,51.35,51.35,0,0,0,47.92,35.62,102.92,102.92,0,0,1-63.7,22A104.41,104.41,0,0,1,75,278.55a145.21,145.21,0,0,0,78.62,23\" fill=\"#fff\"/>\n        </svg>\n      </a>\n      <a aria-label=\"Me on Github\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/shreelvi\" title=\"Github\">\n        <svg id=\"github-logo\" height=\"24\" width=\"24\" data-name=\"Logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\" fill=\"#fff\">\n            <path data-name=\"layer2\"\n            d=\"M32 0a32.021 32.021 0 0 0-10.1 62.4c1.6.3 2.2-.7 2.2-1.5v-6c-8.9 1.9-10.8-3.8-10.8-3.8-1.5-3.7-3.6-4.7-3.6-4.7-2.9-2 .2-1.9.2-1.9 3.2.2 4.9 3.3 4.9 3.3 2.9 4.9 7.5 3.5 9.3 2.7a6.93 6.93 0 0 1 2-4.3c-7.1-.8-14.6-3.6-14.6-15.8a12.27 12.27 0 0 1 3.3-8.6 11.965 11.965 0 0 1 .3-8.5s2.7-.9 8.8 3.3a30.873 30.873 0 0 1 8-1.1 30.292 30.292 0 0 1 8 1.1c6.1-4.1 8.8-3.3 8.8-3.3a11.965 11.965 0 0 1 .3 8.5 12.1 12.1 0 0 1 3.3 8.6c0 12.3-7.5 15-14.6 15.8a7.746 7.746 0 0 1 2.2 5.9v8.8c0 .9.6 1.8 2.2 1.5A32.021 32.021 0 0 0 32 0z\"\n            fill=\"#fff\"></path>\n            <path data-name=\"layer1\" d=\"M12.1 45.9c-.1.2-.3.2-.5.1s-.4-.3-.3-.5.3-.2.6-.1c.2.2.3.4.2.5zm1.3 1.5a.589.589 0 0 1-.8-.8.631.631 0 0 1 .7.1.494.494 0 0 1 .1.7zm1.3 1.8a.585.585 0 0 1-.7-.3.6.6 0 0 1 0-.8.585.585 0 0 1 .7.3c.2.3.2.7 0 .8zm1.7 1.8c-.2.2-.5.1-.8-.1-.3-.3-.4-.6-.2-.8a.619.619 0 0 1 .8.1.554.554 0 0 1 .2.8zm2.4 1c-.1.3-.4.4-.8.3s-.6-.4-.5-.7.4-.4.8-.3c.3.2.6.5.5.7zm2.6.2c0 .3-.3.5-.7.5s-.7-.2-.7-.5.3-.5.7-.5c.4.1.7.3.7.5zm2.4-.4q0 .45-.6.6a.691.691 0 0 1-.8-.3q0-.45.6-.6c.5-.1.8.1.8.3z\"\n            fill=\"#fff\"></path>\n        </svg>\n      </a>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-ang-directive',\n  templateUrl: './ang-directive.component.html',\n  styleUrls: ['./ang-directive.component.scss', '../ang-mat-dialog/ang-mat-dialog.component.scss']\n})\nexport class AngDirectiveComponent implements OnInit {\n\n  pageId = \"/angular-directive-blog\"\n\n  snippet1 = `\n  <input type=\"text\" name=\"UserName\" autofocus>\n  `\n\n  snippet2=`\n  import { Directive, OnInit } from '@angular/core';\n  import { MatInput } from '@angular/material/input';\n\n  @Directive({\n    selector: '[matInputFocus]'\n  })\n  export class AutoFocusDirective implements OnInit {\n\n    constructor(\n      private matInput: MatInput\n    ) { }\n\n    ngOnInit() {\n      this.matInput.focus();\n    }\n\n  }\n`\nsnippet3 = `\n  <input aria-label=\"Login ID\" matInput matInputFocus formControlName=\"username\" placeholder=\"Login ID\">\n`\n\nsnippet4 = `\n  import { AutoFocusDirective } from \"./directives/auto-focus.directive\"\n\n  @NgModule({\n    imports: [\n      ....,\n      AutoFocusDirective\n    ]\n  })\n`\n\n  constructor(private title: Title) {\n    this.title.setTitle('Blogs | Angular Attribute Directives Article')\n    this.loadScripts();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n     'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    Angular tutorial\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        Angular Attribute Directive with Auto-focus example\n                    </h1>\n                </div>\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis S\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                            Sep 23 &nbsp; 2021\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n    \n        </div>\n\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <p class=\"article-paragraph\">\n                    This <strong><i>Angular Attribute Directive with Auto-focus example</i></strong> article walks you through directives in Angular 9 with a sample example of how to create attribute directive to auto-focus on a <code>MAT INPUT</code> form. \n                </p>\n               \n                <div class=\"article-img\">\n                    <img src=\"assets/blog-2.jpg\" alt=\"dialog box\" width=\"700\" height=\"300\" role=\"presentation\">\n                </div>\n\n                <p class=\"article-paragraph\">\n                    Directives in Angular are classes that adds an additional behavior to elements in Angular applications. \n                    The directive class is decorated with <code class=\"inline-code\">@Directive </code> decorator\n                    Directive changes the apperance or behavior of DOM elements and Angular components with attribute directives.\n                    More Info on <a href=\"https://angular.io/guide/built-in-directives\" target=\"_blank\">Directives</a>.\n                    <br><br>Directives are useful in our web applications in many cases, we can use it to manage forms, lists, styles and the UI apperance of web pages.\n                    In this article, We will also see how we can make use of attribute directive class to add auto-focus in Login Page. This directive can be used throghout our application to add auto-focus function anywhere as needed.\n\n                </p>\n               \n\n                <p class=\"article-paragraph\">\n                    There are different types of directives in Angular. <Strong>Components</Strong> is the most common directive type which is a directive with template.\n                    There are <strong>built-in attribute directives </strong>that Angular provides which modifies the behavior of other HTML elements, attributes, properties, and components.\n                </p>\n                \n                <p class=\"article-paragraph\">                  \n                    Some of the common built-in attribute directives are <code class=\"inline-code\">NgClass</code> \n                    which adds and removes CSS classes. <code class=\"inline-code\">NgStyle</code> \n                    which adds and removes a set of HTML styles. <code class=\"inline-code\">NgModel</code> that adds two-way data binding to an HTML form element. \n                    There is also <strong>Structural Directive</strong>. We will not go through them in detail here but you can find more info at link provided above. \n\n                </p>\n\n                <p class=\"article-paragraph\">\n                    In this article, we will focus on Attribute Directive and creating one. As explained before, <strong>Attribute Directives</strong> in Angular are responsible for changing the apperanace or behavior of DOM elements and Angular components. \n                    Here, we will create a directive to add Auto-focus in the login form. In other words, we will create a directive to change the behavior of our HTML form. \n                </p>\n\n                <p class=\"article-paragraph\">\n                    Next, let us discuss about creating a Custom Attribute Directive in our Angular Application.\n                    The main use case is to implement auto-focus to our login page so user should not move mouse curser to the input box. Let's look for the code to accomplish this.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    We could add auto-focus to an input field simply by using the \"autofocus\" attribute from HTML form. \n                    \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet1}}\n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    This works fine with HTML pages but with Angular applications, this does not work when you move from one page to other.\n                    When user is logged out and it redirects to login page, this does not work. \n                    This issue is caused because Autofocus feature of html5 only runs when the first time page loads as in SPA all scripts are loaded at first.  \n                </p>\n\n                <p class=\"article-header\">\n                    Let's build the attribute directive \n                </p>\n\n                <p class=\"article-paragraph\">\n                    We will use Angular CLI to create a directive <code class=\"inline-code\">ng generate directive auto-focus</code>\n                    The CLI creates <code class=\"inline-code\">src/app/auto-focus.directive.ts</code>. It also updates our AppModule.\n                    <br> <br> Let's update our directive file which should look like below snippet:\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet2}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Here, we are using <code>@Directive</code> Decorator to define our directive.\n                    It specifies the directive's CSS attribute selector, [matInputFocus]. \n                    <br> <br> We add <code>MatInput</code> from <code>@angular/material/input</code> in the directive's constructor which provides a reference to the host DOM element, MATINPUT where we want to add <code>AutoFocus</code>.\n                    The logic in the constructor sets the focus on the selected MAT INPUT HTML element.\n                    \n                    <br><br> We will then use this as an HTML element attribute like below wherever we require auto focus feature in our application by just adding the selector <strong>matInputFocus</strong> in Mat-Input elements.\n                    <br><br> First, lets Import the Directive component in the app module or in the Module where we want to use it. \n                    In this example, we are using it in the Login component, so we will import this directive in our module like: \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet4}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Finally, update the login form.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet3}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Angular creates an instance of the Directive class we created and provides a reference to the \n                    <code>input</code> element into the directive's constructor which sets the focus.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    In the same way, you can create custom attribute directives to change the apperance or behavior of your page.\n                    We can handle user events to use directives, pass custom values from user input into attribute directives.\n                    \n                    <br> <br> For example: we can create highlight directive to highlight an HTML element on mouse-hover, mouse-click. We can get color that we want to highlight from user and pass it to the directive to apply the selection.\n                </p>\n\n\n                \n            </div>\n\n        </div>\n\n        <div class=\"comments\">\n            <disqus [identifier]=\"pageId\"></disqus>\n        </div>\n        \n    </div>    \n</article>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-aspnet-uiajax',\n  templateUrl: './aspnet-uiajax.component.html',\n  styleUrls: ['./aspnet-uiajax.component.scss', '../ang-mat-dialog/ang-mat-dialog.component.scss']\n})\nexport class AspNetUIAjaxComponent implements OnInit {\n\n  pageId = \"/angular-uiajax-blog\"\n\n  snippet1 = `\n\n    public class Product: BaseEntity\n    {\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public decimal Price { get; set; }\n        public string PictureUrl { get; set; }\n        public ProductType ProductType { get; set; }\n        public int ProductTypeId { get; set; }\n        public ProductBrand ProductBrand { get; set; }\n        public int ProductBrandId { get; set; }\n    }\n\n    public class ProductType: BaseEntity\n    {\n        public string Name { get; set; }\n    }\n\n    public class ProductBrand: BaseEntity\n    {\n        public string Name { get; set; }\n    }\n\n    public class BaseEntity\n    {\n        public int Id { get; set; }\n    }\n  `\n\n  snippet2=`\n    public class StoreContext : DbContext\n    {\n        public StoreContext()\n        {\n        }\n\n        public StoreContext(DbContextOptions<StoreContext> options) : base(options)\n        {\n        }\n\n        public DbSet<Product> Products { get; set; }\n        public DbSet<ProductBrand> ProductBrands { get; set; }\n        public DbSet<ProductType> ProductTypes { get; set; }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            var configuration = new ConfigurationBuilder()\n                .SetBasePath(Directory.GetCurrentDirectory())\n                .AddJsonFile(\"appsettings.json\")\n                .Build();\n\n            var connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n            optionsBuilder.UseSqlite(connectionString);\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());\n\n           \n        }\n    }\n`\nsnippet3 = `\n  builder.Services.AddDbContext<StoreContext>(x => x.UseSqlite(connectionString));\n`\n\nsnippet4 = `\n  dotnet ef --verbose migrations add InitialCreate -o Data/Migrations\n`\n\nsnippet5 = `\n  public class StoreContextSeed\n    {\n        public static async Task SeedAsync(StoreContext context, ILoggerFactory loggerFactory)\n        {\n            try\n            {\n                var path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n\n                if (!context.ProductBrands.Any())\n                {\n                    var brandsData = File.ReadAllText(path + @\"/Data/SeedData/brands.json\");\n                    var brands = JsonSerializer.Deserialize<List<ProductBrand>>(brandsData);\n\n                    foreach (var item in brands)\n                    {\n                        context.ProductBrands.Add(item);\n                    }\n\n                    await context.SaveChangesAsync();\n                }\n\n                if (!context.ProductTypes.Any())\n                {\n                    var typesData = File.ReadAllText(path + @\"/Data/SeedData/types.json\");\n                    var types = JsonSerializer.Deserialize<List<ProductType>>(typesData);\n\n                    foreach (var item in types)\n                    {\n                        context.ProductTypes.Add(item);\n                    }\n\n                    await context.SaveChangesAsync();\n                }\n\n                if (!context.Products.Any())\n                {\n                    var productsData = File.ReadAllText(path + @\"/Data/SeedData/products.json\");\n                    var products = JsonSerializer.Deserialize<List<Product>>(productsData);\n\n                    foreach (var item in products)\n                    {\n                        context.Products.Add(item);\n                    }\n\n                    await context.SaveChangesAsync();\n                }\n\n  \n            }\n            catch (Exception ex)\n            {\n                var logger = loggerFactory.CreateLogger<StoreContextSeed>();\n                logger.LogError(ex.Message);\n            }\n        }\n    }\n`\n\nsnippet6 = `\n----PRODUCTS----\n{\n  \"Name\": \"Angular Speedster Board 2000\",\n  \"Description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.\",\n  \"Price\": 200,\n  \"PictureUrl\": \"images/products/sb-ang1.png\",\n  \"ProductTypeId\": 1,\n  \"ProductBrandId\": 1\n},\n{\n  \"Name\": \"Green Angular Board 3000\",\n  \"Description\": \"Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.\",\n  \"Price\": 150,\n  \"PictureUrl\": \"images/products/sb-ang2.png\",\n  \"ProductTypeId\": 1,\n  \"ProductBrandId\": 1\n},\n.....\n]\n\n----BRANDS----\n{\n  \"Id\": 1,\n  \"Name\": \"Angular\"\n},\n{\n  \"Id\": 2,\n  \"Name\": \"NetCore\"\n},\n.....\n]\n\n-----TYPES----\n[\n  {\n    \"Id\": 1,\n    \"Name\": \"Boards\"\n  },\n  {\n    \"Id\": 2,\n    \"Name\": \"Hats\"\n  },\n  ....\n]\n`\n\nsnippet7 = `\n  private readonly ILogger<HomeController> _logger;\n    private readonly StoreContext _context;\n\n    public HomeController(ILogger<HomeController> logger, StoreContext context)\n    {\n        _logger = logger;\n        _context = context;\n    }\n\n    public IActionResult Index()\n    {\n        MasterDetailViewModel vm = new MasterDetailViewModel();\n        //vm.Categories = new List<string>() { \"Beverages\", \"Condiments\", \"Confections\", \"Dairy Products\", \"Grains/Cereals\", \"Meat/Poultry\", \"Produce\", \"Seafood\" };\n\n        vm.ProductTypes = _context.ProductTypes.ToList();\n        vm.ProductBrands = _context.ProductBrands.ToList();\n\n        vm.Products = _context.Products.ToList();\n        vm.CatDDL = new List<SelectListItem>();\n\n        for (int i = 0; i < vm.ProductTypes.Count; i++)\n        {\n            vm.CatDDL.Add(new SelectListItem() { Text = vm.ProductTypes[i].Name, Value = vm.ProductTypes[i].Id.ToString() });\n        }\n        return View(vm);\n    }\n`\n\nsnippet8 = `\n      <div class=\"d-flex flex-column justify-content-between\">\n            <h4 class=\"mb-4\" style=\"letter-spacing: 0.07rem;\">View Products By Category</h4>\n            <div class=\"d-flex justify-content-start\">\n                <p>Select a Category.</p>\n                <select asp-for=\"Category\" asp-items=\"Model.CatDDL\" id=\"catDDL\"></select>\n            </div>\n        </div>\n`\n\nsnippet9 = `\n        <table class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>\n                        Product\n                    </th>\n                    <th>\n                        Product Type\n                    </th>\n                    <th>\n                        Product Brand\n                    </th>\n                    <th>\n                        Price\n                    </th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                @foreach (var item in Model.Products)\n                {\n                    <tr>\n                        <td>\n                            @Html.DisplayFor(modelItem => item.Name)\n                        </td>\n                        <td>\n                            @Html.DisplayFor(modelItem => item.ProductType.Name)\n                        </td>\n                        <td>\n                            @Html.DisplayFor(modelItem => item.ProductBrand.Name)\n                        </td>\n                        <td>\n                            $@Html.DisplayFor(modelItem => item.Price)\n                        </td>\n                        <td>\n                            <a asp-action=\"Edit\" asp-route-id=\"@item.Id\"><div class='fa fa-edit'></div></a> |\n                            <a asp-action=\"Details\" asp-route-id=\"@item.Id\"><div class='fa fa-info'></div></a> |\n                            <a asp-action=\"Delete\" asp-route-id=\"@item.Id\"><div class='fa fa-trash'></div></a>\n                        </td>\n                    </tr>\n                }\n            </tbody>\n        </table>\n`\n\nsnippet10 = `\nasync Task SeedDatabaseAsync()\n{\n    using (var scope = app.Services.CreateScope())\n    {\n        var services = scope.ServiceProvider;\n        var loggerFactory = services.GetRequiredService<ILoggerFactory>();\n        try\n        {\n            var context = services.GetRequiredService<StoreContext>();\n            await context.Database.MigrateAsync();\n            await StoreContextSeed.SeedAsync(context, loggerFactory);\n\n        }\n        catch (Exception ex)\n        {\n            var logger = loggerFactory.CreateLogger<Program>();\n            logger.LogError(ex, \"An error occured during migration\");\n        }\n    }\n\n}\n`\n\n  constructor(private title: Title) {\n    this.title.setTitle('Blogs | Angular Attribute Directives Article')\n    this.loadScripts();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n     'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    ASP.NET tutorial\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        Basic Reporting in ASP.NET CORE MVC with EF Core\n                    </h1>\n                </div>\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis S\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n    \n        </div>\n\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <p class=\"article-header\">\n                    introduction\n                </p>\n                <p class=\"article-paragraph\">\n                    In this tutorial, we will see how we can work with Data in ASP.NET MVC using Sqlite database and EF core.\n                    Working with data is a major step in developing a web app and as a developer we come across this all the time.\n                    We store the webapp data in its database for storage and we retrieve and work with it using C# LINQ in ASP.NET MVC framework.\n                    Then, we present and list the data from various sources such database tables, fetch from APIs, and present it in a views in Razor pages.\n\n                    This tutorial will show you how to make basic reporting particularly for the Admins/Masters to manage \n                    the product details. We will get a chance to work with data in various common data scenarios as master details provide us with \n                    chance to manage data and do tasks such as CRUD for our records in the database.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    \n                </p>\n               \n                <p class=\"article-paragraph\">\n                    We are going to use .NET 6.0 version for our web application, the data layer will be developed in Sqlite database which\n                    is light-weight database intended for development purposes. And on the back-end, we will use EF core 6.0 with LINQ to query \n                    the database as c# objects. We will not go into much detail in the database layer and c#/EF code for accessing the database objects,\n                    rather this will be more of a focus on the presentation-layer as we will explore techniques to utilize Javascript, JQuery and Ajax \n                    for seamless user experience and listing the data as a table, we will use bootstrap for stylings.\n                </p>\n\n                <p class=\"article-header\">\n                    Installing EF Core NuGet packages\n                </p>\n\n                <p class=\"article-paragraph\">\n                    We will need to install three packages for this tutorial in order to use EF Core and Sqlite, and install Microsoft.EntityFrameworkCore.design\n                    in order to run commands to create migrations and update database tables.\n                    Required packages are as follows and code to install them using dotnet CLI. <br>\n                    <code class=\"inline-code\">dotnet add package Microsoft.EntityFrameworkCore</code><br>\n                    <code class=\"inline-code\">dotnet add package Microsoft.EntityFrameworkCore.Sqlite</code><br>\n                    <code class=\"inline-code\">dotnet add package Microsoft.EntityFrameworkCore.design</code><br><br>\n\n                    \n                    Directives in Angular are classes that adds an additional behavior to elements in Angular applications. \n                    The directive class is decorated with <code class=\"inline-code\">@Directive </code> decorator\n                    Directive changes the apperance or behavior of DOM elements and Angular components with attribute directives.\n                    More Info on <a href=\"https://angular.io/guide/built-in-directives\" target=\"_blank\">Directives</a>.\n                    <br><br>Directives are useful in our web applications in many cases, we can use it to manage forms, lists, styles and the UI apperance of web pages.\n                    In this article, We will also see how we can make use of attribute directive class to add auto-focus in Login Page. This directive can be used throghout our application to add auto-focus function anywhere as needed.\n\n                </p>\n                <p class=\"article-header\">\n                    Creating the model\n                </p>\n                <p class=\"article-paragraph\">\n                    The model/entity classes for this example are in the following code.\n                </p>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet1}}  \n                    </code>\n                </pre>\n               \n\n                <p class=\"article-paragraph\">\n                    Now, we will define our database context class. In .Net 6.0, to create a database connection we will override OnConfiguring method and pass the connection string from the appsettings file as below.\n                    We used the startup class in .Net 5.0 to do this and we might encounter the error that the connection is not configured in the context class. Then, we will need to update our Program.cs class to set dependency injection with service container.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet2}}  \n                    </code>\n                </pre>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet3}}  \n                    </code>\n                </pre>\n\n                <p class=\"article-header\">\n                    Creating the database using EF migrations\n                </p>\n                \n                <p class=\"article-paragraph\">                  \n                    After installing the EF Core Design package, we will be able to add migration and create using this <code class=\"\"></code>\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet4}}  \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    This will install migration scripts that will be used for creating the database in Data folder. Adding --verbose will give us detail if we get any error.\n                </p>\n                <p class=\"article-header\">\n                    Creating the Database seed class\n                </p>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet5}}  \n                    </code>\n                </pre>\n                <p class=\"article-paragraph\">\n                    Add the StoreContextSeed.cs class under data folder and replace it with the below code which will add example data in the database.\n                    Notice that we are using three .json files for fill the tables used in our example.\n                </p>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet6}}  \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Next, we will use this class to seed our database with the following method in the Program class, at the very below of all the code.\n                    And we will call this method using this <code>await SeedDatabaseAsync();</code> under the <code>app.UseStaticFiles();</code>\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet9}}  \n                    </code>\n                </pre>\n\n                <p class=\"article-header\">\n                    Basic Reporting with Dropdown filter\n                </p>\n\n                <p class=\"article-paragraph\">\n                    After setting up the data layer, we can see now how we can create a basic reporting and filter the report\n                    using a dropdown, and we will use Jquery AJAX to filter data and make a call to our controller and update the table with the updated response.\n                    Replace the index method of home page with the below code: \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet7}}  \n                    </code>\n                </pre>\n                <p class=\"article-paragraph\">\n                    We will pass the list of SelectListItem object which will contain the dropdown values and text for the Product brand with its ID.\n                    This can be passed as a viewbag but we will use a viewmodel class for our view to store its related data like int property for dropdown selection, selectlistitem list etc. This list is used in our view for displaying the dropdown filter.\n                    We can then use HTML Select element with ASP.NET HTML tab asp-for and asp-items to fill the dropdown box as shown below:\n                </p>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet8}}  \n                    </code>\n                </pre>\n                <p class=\"article-paragraph\">\n                    The products data is displayed in our view using the bootstrap table.\n                </p>\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet9}}  \n                    </code>\n                </pre>\n                <p class=\"article-paragraph\">\n                    The complete view for our example will look like this image.\n                </p>\n\n                <div class=\"article-img\">\n                    <img src=\"assets/blog-data.png\" alt=\"dialog box\" style=\"width: 100%;  height: 80%;\"role=\"presentation\">\n                </div>\n\n            </div>\n\n        </div>\n\n        <div class=\"comments\">\n            <disqus [identifier]=\"pageId\"></disqus>\n        </div>\n        \n    </div>    \n</article>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss']\n})\nexport class HomePageComponent implements OnInit {\n\n  constructor(private title: Title) {\n    this.title.setTitle('Home | Elvis Software Development Blogs') \n    this.loadScripts();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n     'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<div class=\"intro-container\">\n  <h1 class=\"title\">Elvis Blog</h1>\n  <h2 class=\"sub-title\">Sharing Software Development Tutorials and Articles </h2>\n\n  <span class=\"follow-twitter\">\n    <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\"\n      data-show-count=\"false\" data-show-screen-name=\"false\"></a>\n  </span>\n\n\n  <br>\n</div>\n<div fxFlex fxLayout=\"row\" class=\"main-article-container\">\n  <div class=\"article-img\">\n    <a routerLink=\"/asp-net-uiajax\" routerLinkActive=\"active\">\n      <img class=\"main-img\" src=\"assets/blog-data.png\" alt=\"blog\" width=\"600\" height=\"300\" role=\"presentation\">\n    </a>\n  </div>\n\n  <div class=\"article-info\">\n    <a routerLink=\"/asp-net-uiajax\" routerLinkActive=\"active\">\n      <h1 class=\"info-title\" style=\"color: black;\">Basic Reporting in ASP.NET CORE MVC with EF Core</h1>\n    </a>\n\n    <p class=\"blog-desc\">\n      In this tutorial, we will see how we can work with data in ASP.NET Core MVC with EF and list and present \n      the data in table. We will start with setting up the Data layer in ASP.NET 6.0 with Sqlite database and EF Core and create a presentation layer to list the data in table.\n    </p>\n  </div>\n</div>  \n\n<div class=\"list-container\">\n  <a routerLink=\"/asp-net-auth\" routerLinkActive=\"active\">\n    <mat-card class=\"example-card\">\n\n      <img mat-card-image src=\"assets/Auth.png\" alt=\"Photo of a Shiba Inu\">\n      <mat-card-content>\n        <h1 class=\"list-title\">\n          Implementing JWT Token based Authentication using ASP.NET Core Identity \n        </h1>\n        <p class=\"blog-desc\">\n          This guide will show you how we can implement JWT based authentication which is very popular among modern applications and SPAs in ASP.NET Core using Identity.\n      We will use Identity to manager users (register and sign-in users), and create JWT based token that our client and several other applications can use to access the server.\n        </p>\n      </mat-card-content>\n\n    </mat-card>\n  </a>\n\n  <a routerLink=\"/blog4\" routerLinkActive=\"active\">\n    <mat-card class=\"example-card\">\n\n      <img mat-card-image src=\"assets/blog-4.png\" alt=\"Jest testing\">\n      <mat-card-content class=\"card-content\">\n        <h1 class=\"list-title\">\n          Unit Testing Angular Services and Components Using JEST Framework (Part1)\n        </h1>\n        <p class=\"blog-desc\">\n          This <i>JEST testing tutorial</i> will offer techniques and tips on how to write unit tests for the service class in\n      Angular using Jest framework.\n        </p>\n      </mat-card-content>\n\n    </mat-card>\n  </a>\n\n  <a routerLink=\"/blog1\" routerLinkActive=\"active\">\n    <mat-card class=\"example-card\">\n\n      <img mat-card-image src=\"assets/blog-1.jpg\" alt=\"Photo of a Shiba Inu\">\n      <mat-card-content class=\"card-content\">\n        <h1 class=\"list-title\">\n          Building a dialog box to edit table row data with Angular Material Components\n        </h1>\n        <p class=\"blog-desc\">\n          This <i>Angular 10 Material Dialog to Edit table row</i> tutorial shows you how we can use the Angular\n          Material Dialog component\n          to build a reusable UI for CRUD operations on a table data.\n        </p>\n      </mat-card-content>\n\n    </mat-card>\n  </a>\n\n</div>\n\n<div class=\"list-container\">\n  <a routerLink=\"/angular-directive-blog\" routerLinkActive=\"active\">\n    <mat-card class=\"example-card\">\n\n      <img mat-card-image src=\"assets/blog-2.jpg\" alt=\"Photo of a Shiba Inu\">\n      <mat-card-content>\n        <h1 class=\"list-title\">\n          Angular Attribute Directive with Auto-focus example\n        </h1>\n        <p class=\"blog-desc\">\n          This article explains briefly about directives in Angular 9 with a sample example of using attribute directive\n          to auto-focus on a input form.\n        </p>\n      </mat-card-content>\n\n    </mat-card>\n  </a>\n\n  <a routerLink=\"/blog3\" routerLinkActive=\"active\">\n    <mat-card class=\"example-card\">\n\n      <img mat-card-image src=\"assets/blog-3.jpg\" alt=\"Photo of a Shiba Inu\">\n      <mat-card-content class=\"card-content\">\n        <h1 class=\"list-title\">\n          TV White Space Spectrum -- Super WiFi detailed look and its benefits to rural areas.\n        </h1>\n        <p class=\"blog-desc\">\n          This article gives you a detailed explanation on upcoming and promising internet technology by Microsoft,\n          Super Wi-fi (TV white spectrum).\n        </p>\n      </mat-card-content>\n\n    </mat-card>\n  </a>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'elvis-tech-blogs';\n}\n","<app-nav-bar></app-nav-bar>\n\n<router-outlet></router-outlet>\n\n<app-footer></app-footer>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { HomePageComponent } from './home-page/home-page.component';\nimport { AngMatDialogComponent } from './blogs/ang-mat-dialog/ang-mat-dialog.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { TestDialogComponent } from './test-dialog/test-dialog.component';\nimport { TestProductComponent } from './test-product-component/test-product.component';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { FormsModule } from '@angular/forms';\nimport { ProgressSpinnerDialogComponent } from './progress-spinner-dialog/progress-spinner-dialog.component';\nimport { AngDirectiveComponent } from './blogs/ang-directive/ang-directive.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { AutoFocusDirective } from './auto-focus.directive';\nimport { SuperWifiArticleComponent } from './blogs/super-wifi-article/super-wifi-article.component';\nimport { DisqusModule } from 'ngx-disqus';\nimport { AngTestJestComponent } from './blogs/ang-test-jest/ang-test-jest.component';\nimport { AspNetAuthIdentityComponent } from './blogs/asp-net-auth-identity/asp-net-auth-identity.component';\nimport { AspNetUIAjaxComponent } from './blogs/aspnet-uiajax/aspnet-uiajax.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavBarComponent,\n    HomePageComponent,\n    AngMatDialogComponent,\n    TestDialogComponent,\n    TestProductComponent,\n    ProgressSpinnerDialogComponent,\n    AngDirectiveComponent,\n    FooterComponent,\n    AutoFocusDirective,\n    SuperWifiArticleComponent,\n    AngTestJestComponent,\n    AspNetAuthIdentityComponent,\n    AspNetUIAjaxComponent\n  ],\n  imports: [\n    AngularMaterialModule,\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    DisqusModule.forRoot('elvis-tech-blogs')\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"footer\">\n    <div class=\"footer-row\">\n      <a href=\"http://elvishrestha.com\">About the Author</a>\n      <a routerLink=\"/blog1\" routerLinkActive=\"active\">Latest Blog</a>\n      <a href=\"https://www.github.com/shreelvi\">Github</a>\n      <a href=\"https://resnology-core-sql.azurewebsites.net/home\">Try my Resume Builder</a>\n      <p class=\"copyright\"> © 2021</p>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-progress-spinner-dialog',\n  templateUrl: './progress-spinner-dialog.component.html',\n  styleUrls: ['./progress-spinner-dialog.component.scss']\n})\nexport class ProgressSpinnerDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-spinner></mat-spinner>","import { Directive, OnInit } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\n\n@Directive({\n  selector: '[matInputFocus]'\n})\nexport class AutoFocusDirective implements OnInit {\n\n  constructor(\n    private matInput: MatInput\n  ) { }\n\n  ngOnInit() {\n    this.matInput.focus();\n  }\n\n  \n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-ang-test-jest',\n  templateUrl: './ang-test-jest.component.html',\n  styleUrls: ['./ang-test-jest.component.scss', '../ang-mat-dialog/ang-mat-dialog.component.scss']\n})\nexport class AngTestJestComponent implements OnInit {\n\n  pageId = \"/blog4\"\n\n  snippet1 = `\n  import { Injectable } from '@angular/core';\n  import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n  import { IGroupsResponse } from '../models/groups-test-demo';\n  import { environment } from '../../environments/environment';\n  import { catchError, tap } from 'rxjs/operators';\n  import { Observable, throwError } from 'rxjs';\n\n  @Injectable({\n      providedIn: 'root'\n  })\n  export class GroupsTestDemoService {\n\n      private url: string = '/api/users';\n\n      baseUrl = environment.apiUrl;\n\n      constructor(private httpClient: HttpClient) { }\n\n      getGroups(): Observable<IGroupsResponse> {\n          return this.httpClient.get<IGroupsResponse>(this.baseUrl + 'group')\n              .pipe(\n                  tap(groups => console.log('groups fetched')),\n                  catchError(this.handleError)\n                  ) as Observable<IGroupsResponse>;\n      }\n\n      private handleError(error: HttpErrorResponse) {\n          if (error.status === 0) {\n            // A client-side or network error occurred. Handle it accordingly.\n            console.error('An error occurred:', error.error);\n          } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong.\n            console.error(\n              console.log(error);\n          }\n\n          // Return an observable with a user-facing error message.\n          return throwError(\n            'Something bad happened; please try again later.');\n        }\n      \n  }\n  `\n\n  snippet2 = `\n    import { IGroupsResponse } from \"../models/groups-test-demo\";\n    import { GroupsTestDemoService } from \"./groups-test-demo.service\"\n\n    describe('GroupsDemoService (using mock)', () => {\n        let groupsDemoService : GroupsTestDemoService;\n        let httpClientMock: any; // create httpClient mock variable of any type\n\n        // mock back-end response\n        let mockGroupsResponse: IGroupsResponse = {\n            groups: [\n                {\n                    groupName: \"test1\",\n                    groupDescription: \"test desc\",\n                    apiRoles: \"read, write, update\"\n                },\n                {\n                    groupName: \"test2\",\n                    groupDescription: \"test desc\",\n                    apiRoles: \"read, write\"\n                }\n            ]\n        }\n\n        beforeEach(() => {\n          // this method calls before executing each test\n          // setup mock for httpClient service with 'Get' function using jest.\n            httpClientMock = {\n                get: jest.fn()\n            };\n\n            // create the service to test by injecting the mock http service \n            groupsDemoService = new GroupsTestDemoService(httpClientMock);\n        });\n\n        it('should return expected groups', async() => {\n          // mock observable to return resolved promise with mock group response\n          // the real function uses pipe to stream observables so that function is mocked\n            const mockObservable = {\n                pipe: () => Promise.resolve(mockGroupsResponse)\n            }\n            httpClientMock.get.mockImplementation(() => mockObservable) // using Jest mockImplementation to return http response that we mocked\n\n            await expect(groupsDemoService.getGroups()).resolves.toBe(mockGroupsResponse); // call the real method and assert that the method succeeds and return expected result \n        })\n\n        \n    })\n`\n\nsnippet3 = `\n  import { HttpClient } from \"@angular/common/http\";\n  import { HttpClientTestingModule, HttpTestingController } from \"@angular/common/http/testing\";\n  import { TestBed } from \"@angular/core/testing\";\n  import { GroupsTestDemoService } from \"./groups-test-demo.service\"\n`\n\nsnippet4 = `\n  describe('HttpClient testing using Angular testing libraries', () => {\n    let httpClient: HttpClient;\n    let httpTestingController: HttpTestingController;\n    let groupsDemoService: GroupsTestDemoService; \n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [ HttpClientTestingModule ]\n      });\n\n      // Inject the http service, groups service and test controller for each test\n      httpClient = TestBed.inject(HttpClient);\n      httpTestingController = TestBed.inject(HttpTestingController);\n      groupsDemoService = TestBed.inject(GroupsTestDemoService);\n    });\n    /// Tests begin ///\n  });\n`\n\nsnippet5 = `\n  it('can test HttpClient.get', async() => {      \n    // Make an HTTP GET request\n    const response =  groupsDemoService.getGroups();\n\n    // Make assertion that response data  will be mock data after subscribing to the observable\n    response.subscribe(data => \n      // When observable resolves, result should match test data\n        expect(data).resolves.toBe(mockGroupsResponse));\n\n    // The following expectOne() will match the request's URL.\n    // Throws error if no/multiple match is found\n    const req = httpTestingController.expectOne('https://localhost:5001/api/group')\n\n    expect(req.request.method).toEqual('GET');\n\n    // Mock the groupsResponse data when the req is called\n    req.flush(mockGroupsResponse);\n        \n    // Finally, assert that there are no outstanding requests.\n    httpTestingController.verify();\n  });\n`\n\nsnippet6 = `\n  it('should return an error when the server returns a 404', async() => {\n    const mockErrorResponse = new HttpErrorResponse({\n        error: 'test 404 error',\n        status: 404, statusText: 'Not found'\n    });\n    const mockObservable = {\n        pipe: () => Promise.reject(mockErrorResponse)\n    }\n    httpClientMock.get.mockImplementation(() => mockObservable)\n\n    await expect(groupsDemoService.getGroups()).rejects.toBe(mockErrorResponse);\n  })\n`\nsnippet7 = `\n  it('can test for 404 error', () => {\n    const emsg = 'deliberate 404 error';\n\n    const response =  groupsDemoService.getGroups();\n    response.subscribe(data => fail('should have failed with the 404 error'),\n    (error: HttpErrorResponse) => {\n      expect(error.status).toEqual(404);\n      expect(error.error).toEqual(emsg);\n    });\n\n    const req = httpTestingController.expectOne('https://localhost:5001/api/group');\n\n    // Respond with mock error\n    req.flush(emsg, { status: 404, statusText: 'Not Found' });\n  })\n`\n\nconstructor(private title: Title) { \n  this.title.setTitle('Blogs | Testing Angular HTTP Service calls using JEST')\n  this.loadScripts();\n}\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n    'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    Angular tutorial\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        Unit Testing Angular Services and Components Using JEST (Part1)                  \n                    </h1>\n                </div>\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis Shrestha\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n    \n        </div>\n\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <p class=\"article-paragraph\">\n                    Unit testing your angular applications helps you ensure that your app is working as you expect. \n                    Unit-testing becomes a very useful tool to integrate automatic testing as the codebase grows large in size and the app is prone to bugs and issues. \n                    I like unit testing because I don’t have to run the app manually and test each time I make changes in my code and make sure all the code is working as expected.\n                </p>\n\n                <p class=\"article-header\">\n                    Introduction         \n                </p>\n\n                <p class=\"article-paragraph\">\n                    This testing tutorial will offer techniques and tips on how to write unit tests for the service logic and the component in Angular. \n                    We will use a sample application that gets a list of groups from a backend service using HttpClient and displays the group information in the table. \n                    It walks you through testing the service functions that calls the API by using mock data to fake the http calls, and testing of the component using Angular’s Testing object model - TestBed.                 \n                </p>\n\n                <p class=\"article-paragraph\">\n                    As Angular app is managed by the @NgModule classes. \n                    And we can define dependencies and setup environments for each component on their own module or in the root module. \n                    Similarly, services in angular often depend on other services which are injected in their constructor. So, in order to test the angular component/ services we will require a similar setup for creating components with its dependencies.                 </p>\n                \n                <p class=\"article-paragraph\">\n                    Angular provides the TestBed class to set up testing environments for components/services. \n                    We will see more detail on this as we begin testing using the library. Angular also provides utilities and libraries to test for service dependencies and HttpCalls.\n                </p>\n\n                <p class=\"article-header\">\n                    Setup Testing         \n                </p>\n\n                <p class=\"article-paragraph\">\n                    Angular app by default comes with the Jasmine test framework and  the Angular CLI downloads and installs everything you need to test an Angular application. \n                    Both frameworks make use of Angular testing libraries and modules and there are only a few syntax differences between them. \n                    You can find an official tutorial on testing using the Jasmine framework <a href=\"https://angular.io/guide/testing\">here</a>. JEST seems to be liked by developers because it is faster and requires less configuration for testing angular apps. Unlike Jasmine and Karma, it does not require a browser to load the test results and it runs the tests in parallel. We can use Angular CLI to view the results and generate coverage reports.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    This tutorial requires that you have a JEST framework configured as you have to install it manually and <a href=\"https://medium.com/@nerdic.coder/how-to-use-jest-unit-tests-with-angular-87509b500158\">here</a> \n                    is one of the guides which can help you with set up. \n                </p>\n\n                <p class=\"article-header\">\n                    Testing HTTP Services        \n                </p>\n\n                <p class=\"article-paragraph\">\n                    For this tutorial, we are going to test the service that is only dependent on HttpClient to call the API. \n                    So we will see how we can test the Http services. \n                    I will show you two different ways to test it. First, we will see how we can mock the HttpClient get method to return a rxJS promise with  a group response. The service we are going to test is given below.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet1}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    The groups data service makes a HTTP GET call to remote servers by injecting and delegating to the Angular HttpClientservice for XHR calls. \n                    We can test this data service with an injected HttpClient mock class with a GET Function as below. \n                    Similarly, if the service is dependent on other services we would test it by mocking the dependent services.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet2}}\n        \n                    </code>\n                </pre>\n                    \n                <p class=\"article-paragraph\">\n                    The GroupsService getGroups() method return Observables so we must subscribe to an observable to cause it to execute and assert that method succeeds or fails.\n                    The test technique above does not use any Angular util. \n                    We are simply mocking HttpClient service using Jest and injecting the mock service to create GroupService.\n                    \n                </p>\n\n                <p class=\"article-paragraph\">\n                    So when we call the getGroups() function, it will return the mockGroupResponse that we have defined.\n                    The HttpClient Get function in this test will chain the pipe function which will return the resolved promise. If we want to test for error case then we can mock the function to return rejected promise using Jest MockImplementation.\n                    To view more about testing asynchronous code using JEST, here is the <a href=\"https://jestjs.io/docs/asynchronous\">link</a>.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    In the same way, we can use Jest mocking to mock for error response. \n                    First, we create the mock error response and implement the httpClient to return rejected promise with the error. \n                    The test case for an 404 error scenario can be written as.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet6}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-header\">\n                    Testing HTTP Requests Using Angular library        \n                </p>\n\n                <p class=\"article-paragraph\">\n                    Another way to test the Angular service is using the Angular modules/libraries.\n                    Other interactions between the data services and the httpclient can be complex and difficult to mock with Jest mock functions.\n                    The HttpClientTestingModule can make testing other complex scenarios like POST, PUT or DELETE calls easier to test.\n                    The <code>@angular/common/http/testing</code> library makes it straightforward to set up mocking to mock the HTTP backend service so our tests can simulatealls to a remote server.\n                </p>\n\n                <p class=\"article-header\">\n                    Setting up HttpClientTestingModule       \n                </p>\n\n                <p class=\"article-paragraph\">\n                   To test httpclient we need to import the HttpClientTestingModule, TestBed and the mocking controller and other required library as below. \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet3}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Then we need to setup our test environment for the service we are going to test using TestBed and add the HttpClientTestingModule to the TestBed.\n                 </p>\n\n                 <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet4}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Now we have setup our testing environment so that the requests made in our tests hit the testing backend instead of real backend server.\n                    We are injecting httpClient service and the mocking controller using <code>TestBed.inject()</code> so we can reference them in our tests.\n                    Next we can write our unit test for getGroups method that expects a GET request and provides a mock response.\n                 </p>\n\n                 <p class=\"article-paragraph\">\n                    Testing using Angular library runs in a slightly different pattern of testing. First, we make request call to the real service.\n                    Then, we make expectations that certain requests have been made, assert the expected response. \n                    And finally, we provide mock responses to return when the service is called by using \"flush\" method.\n                 </p>\n\n                 <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet5}}\n        \n                    </code>\n                </pre>\n\n                 <p class=\"article-paragraph\">\n                    We can also make custom request expectations like making assertions and checking that the request has certain header. We can also handle more than one requests in a method. \n                    <a href=\"https://angular.io/guide/http#testing-http-requests\">Learn</a> more about Angular Http Testing Module\n                 </p>\n\n                 <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet5}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    And to test for the scenario when HTTP request fails we can use the testing controller to flush and respond with mock error.\n                 </p>\n\n                 <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet7}}\n        \n                    </code>\n                </pre>\n                \n            </div>\n        </div>\n\n        <div class=\"comments\">\n            <disqus [identifier]=\"pageId\"></disqus>\n        </div>\n\n    </div>\n</article>\n","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-asp-net-auth-identity',\n  templateUrl: './asp-net-auth-identity.component.html',\n  styleUrls: ['./asp-net-auth-identity.component.scss', '../ang-mat-dialog/ang-mat-dialog.component.scss']\n})\nexport class AspNetAuthIdentityComponent implements OnInit {\n\n  pageId = \"/blog-auth\";\n\n  snippet1 = `\n  services.AddDbContext<AppIdentityDbContext>(x => \n    x.UseSqlite(Configuration.GetConnectionString(\"IdentityConnection\")));`\n\n  snippet2 = `\n  namespace Infrastructure.Identity\n  {\n      public class AppIdentityDbContext : IdentityDbContext<AppUser> // This ensures that EF will create our AppUser table with its properties\n      {\n          public AppIdentityDbContext(DbContextOptions<AppIdentityDbContext> options) : base(options)\n          {\n          }\n\n          protected override void OnModelCreating(ModelBuilder builder)\n          {\n              base.OnModelCreating(builder);\n          }\n      }\n  }\n  `\n\n  snippet3 = `\n  \"ConnectionStrings\": {\n    \"DefaultConnection\":  \"Data source=skinet.db\",\n    \"IdentityConnection\": \"Data source=identity.db\"\n  }\n  `\n\n  snippet4 = `\n  dotnet ef migrations add IdentityInitial -c AppIdentityDbContext -o Infrastructure/Identity/Migrations\n  `\n\n  snippet5 = `\n    public class AppIdentityDbContextSeed\n    {\n        public static async Task SeedUsersAsync(UserManager<AppUser> userManager)\n        {\n            if (!userManager.Users.Any())\n            {\n                var user = new AppUser\n                {\n                    DisplayName = \"Joe\",\n                    Email = \"joe@test.com\",\n                    UserName = \"joe123\",\n                    Address = new Address\n                    {\n                        FirstName = \"Joe\",\n                        LastName = \"Smith\",\n                        Street = \"1234 second st.\",\n                        City = \"New York\",\n                        State = \"NY\",\n                        ZipCode = \"90210\"\n                    }\n                };\n\n                await userManager.CreateAsync(user, \"Pa$$w0rd\");\n            }\n        }\n    }\n  `\n\n  snippet6 = `\n  \n  `\n\n  snippet7 = `\n    public static class IdentityServiceExtensions\n    {\n        public static IServiceCollection AddIdentityServices(this IServiceCollection services)\n        {\n            var builder = services.AddIdentityCore<AppUser>();\n\n            builder = new IdentityBuilder(builder.UserType, builder.Services);\n            builder.AddEntityFrameworkStores<AppIdentityDbContext>();\n            builder.AddSignInManager<SignInManager<AppUser>>();\n\n            services.AddAuthentication();\n\n            return services;\n        }\n    }\n  `\n\n  snippet8 = `\n  services.AddIdentityServices();\n  `\n\n  snippet9 = `\n        public static async Task Main(string[] args)\n        {\n            var host = CreateHostBuilder(args).Build();\n            using (var scope =  host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                var loggerFactory = services.GetRequiredService<ILoggerFactory>();\n                try\n                {\n                    var context = services.GetRequiredService<StoreContext>();\n                    await context.Database.MigrateAsync();\n\n                    var userManager = services.GetRequiredService<UserManager<AppUser>>();\n                    var identityContext = services.GetRequiredService<AppIdentityDbContext>();\n                    await identityContext.Database.MigrateAsync();\n                    await AppIdentityDbContextSeed.SeedUsersAsync(userManager);\n                    \n                }\n                catch(Exception ex)\n                {\n                    var logger = loggerFactory.CreateLogger<Program>();\n                    logger.LogError(ex, \"An error occured during the migration\");\n                }\n            }\n            \n            host.Run();\n        }\n  `\n\n  snippet10 = `\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AccountController : ControllerBase\n    {\n        private readonly UserManager<AppUser> _userManager;\n        private readonly SignInManager<AppUser> _signInManager;\n        public AccountController(UserManager<AppUser> userManager, SignInManager<AppUser> signInManager)\n        {\n            _signInManager = signInManager;\n            _userManager = userManager;\n        }\n\n        [HttpPost(\"login\")]\n        public async Task<ActionResult<UserDto>> Login(LoginDto loginDto)\n        {\n            var user = await _userManager.FindByEmailAsync(loginDto.Email);\n\n            if(user == null)\n            {\n                return Unauthorized();\n            }\n\n            var result = await _signInManager.CheckPasswordSignInAsync(user, loginDto.Password, false);\n\n            if (!result.Succeeded)\n            {\n                return Unauthorized();\n            }\n\n            return new UserDto\n            {\n                Email =  user.Email,\n                Token = \"This will be a JWT token\",\n                DisplayName = user.DisplayName\n            };\n        }\n    }\n  `\n\n  snippet11 = `\n        [HttpPost(\"register\")]\n        public async Task<ActionResult<UserDto>> Register(RegisterDto registerDto)\n        {\n            var user = new AppUser\n            {\n                DisplayName = registerDto.DisplayName,\n                Email = registerDto.Email,\n                UserName = registerDto.Email\n            };\n\n            var result = await _userManager.CreateAsync(user, registerDto.Password);\n\n            if (!result.Succeeded)\n            {\n                return BadRequest();\n            }\n\n            return new UserDto\n            {\n                DisplayName = user.DisplayName,\n                Token = \"This will be a token\",\n                Email = user.Email\n            };\n        }\n  `\n\n  snippet12 = `\n    public class TokenService: ITokenService\n    {\n        private readonly IConfiguration _config;\n        private readonly SymmetricSecurityKey _key;\n        public TokenService(IConfiguration config)\n        {\n            _config = config;\n            _key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Token:Key\"]));\n        }\n\n        public string CreateToken(AppUser user)\n        {\n            var claims = new List<Claim>\n            {\n                new Claim(ClaimTypes.Email, user.Email),\n                new Claim(ClaimTypes.GivenName, user.DisplayName)\n            };\n\n            var creds = new SigningCredentials(_key, SecurityAlgorithms.HmacSha512Signature);\n\n            var tokenDescriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(claims),\n                Expires = DateTime.Now.AddDays(7),\n                SigningCredentials = creds,\n                Issuer = _config[\"Token:Issuer\"]\n            };\n\n            var tokenHandler = new JwtSecurityTokenHandler();\n\n            var token = tokenHandler.CreateToken(tokenDescriptor);\n\n            return tokenHandler.WriteToken(token);\n        }\n    }\n  `\n\n  snippet14 = `\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n                .AddJwtBearer(options => \n                {\n                    options.TokenValidationParameters = new TokenValidationParameters\n                    {\n                        ValidateIssuerSigningKey = true,\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config[\"Token:Key\"])),\n                        ValidIssuer = config[\"Token:Issuer\"],\n                        ValidateIssuer = true,\n                    };\n                });\n  `\n\n  constructor(private title: Title) { \n    this.title.setTitle('Blogs | Authentication and Authorization on ASP.NET Core Web API with Angular SPA using Identity (JWT Token)')\n    this.loadScripts();\n  }\n\n\n  ngOnInit(): void {\n  }\n\n  loadScripts() {\n    const dynamicScripts = [\n    'https://platform.twitter.com/widgets.js'\n    ];\n    for (let i = 0; i < dynamicScripts.length; i++) {\n      const node = document.createElement('script');\n      node.src = dynamicScripts[i];\n      node.type = 'text/javascript';\n      node.async = true;\n      node.charset = 'utf-8';\n      document.getElementsByTagName('head')[0].appendChild(node);\n    }\n  }\n\n}\n","\n<article class=\"ang-matDialog\">\n    <div fxFlex fxLayout=\"column\">\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <h2 class=\"category\">\n                    ASP.NET tutorial\n                </h2>\n                <div>\n                    <h1 class=\"blog-title\">\n                        Authentication and Authorization on ASP.NET Core Web API with Angular SPA using Identity (JWT Token)\n                    </h1>\n                </div>\n                <div class=\"author-info\">\n                    <div fxFlex fxLayout=\"column\">\n                        <div class=\"namee\">\n                            <span class=\"nameee\">\n                                Elvis Shrestha\n                            </span>\n                            \n                            <span class=\"follow-twitter\">\n                                <a href=\"https://twitter.com/elvis_shrestha?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\" data-show-screen-name=\"false\">Follow</a>                      \n                            </span>\n                        </div>\n                        <div class=\"date-readtime\">\n                        </div>\n                    </div>\n                    \n                </div>\n\n            </div>\n        </div>\n\n        <div class=\"article-content\">\n            <div class=\"header-center\">\n                <p class=\"article-paragraph\">\n                    Securing our application to allow access to users with proper credentials is an important part of an application development.\n                    To do this our app needs to authenticate users successfully. Authentication is a process that involves user providing credentials and the app comparing to those stored in a database.\n                    \n                </p>\n                <p class=\"article-paragraph\">\n                    If the credentials matches, users are authenticated and can access the resources they have Authorization. \n                    This process of determining if user is allowed to perform certain action is Authorization.\n                    \n                    ASP.NET Core provides built in identity providers library to secure ASP.NET Core apps including with SPAs -- Angular, React and other tools like third-party identity services to login using social identities such as Facebook, Twitter and LinkendIn.                \n\n                </p>\n                <p class=\"article-paragraph\">\n                    This tutorial will show you how to configure sign-in with ASP.NET Identity in an existing ASP.NET Core Web API SPA with Angular on the front-end. \n                    We will implement a JWT token based login and use Identity libraries(NuGet) and some of its features to handle authentication and authorization in our application. \n\n                </p>\n                \n                <p class=\"article-paragraph\">\n                    The <a href=\"https://github.com/shreelvi/JWT-Authentication-ASPNetCore\" target=\"_blank\">source code </a> for this tutorial can be accessed on Github\n                </p>\n\n                <p class=\"article-header\">\n                    Identity on ASP.NET Core\n                </p>\n\n                <p class=\"article-paragraph\">\n                    ASP.NET Core Identity is an API that supports user interface (UI) login functionality. Its going to be responsible \n                    for allowing new users to register and login to our application with proper credentials. Identity manages users, passwords (string hash password), profile data,\n                    roles, claims, tokens, email confirmation, social logins and more. \n\n                </p>\n\n                <p class=\"article-paragraph\">\n                    In our application, we will use ASP.NET Core Identity to manager the user accounts. It will be reposinsible for allowing us to register a new user and allow the user to login to our app.\n                    It also easily allows us to secure the user password with string hash. In addition, we can use the identity for other things such as social logins and more.\n                    We are going to use only some part of it, managing users and issue special JWT tokens to our clients so that they can use to authenticate against our application. \n                </p>\n\n                <p class=\"article-paragraph\">\n                    For more information on ASP.NET Identity, see this <a href=\"https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/introduction-to-aspnet-identity\">link</a> \n                </p>\n\n                <p class=\"article-header\">\n                    Setting up Identity \n                </p>\n\n\n                <p class=\"article-paragraph\">\n                    First we need to install all the packages for ASP.NET Identity and generating JWT Bearer token so that we can implement the Authentication using OpenID/OAuth 2.0 token and Asp.Net core Identity.\n                    Following packages are required in our application: Also we need to configure our application to use 'Microsoft.EntityFrameworkCore.Sql' package to connect to our SQL database with EF Core.\n\n                </p>\n\n                <ul>\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/Microsoft.AspNetCore.Identity.EntityFrameworkCore/\">Microsoft.AspNetCore.Identity.EntityFrameworkCore</a>\n                        <p>\n                            This package has the Entity Framework core implementation of ASP.NET Identity core and it will persist the ASP.NET Identity data and schema to SQL Server.\n                        </p>\n                    </li>\n\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/Microsoft.AspNetCore.Identity/\">Microsoft.AspNetCore.Identity</a>\n                        <p>\n                            This ASP.NET Core Identity package is the membership system for building ASP.NET Core web apps. It allows you to add login features to your application and manager the app users.\n                        </p>\n                    </li>\n\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/Microsoft.IdentityModel.Tokens/\">Microsoft.IdentityModel.Tokens</a>\n                        <p>\n                            This package includes types that provide support for SecurityTokens, Cryptographic operations such as Signing, Verifying Signatures, Encryption.                        \n                        </p>\n                    </li>\n\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/System.IdentityModel.Tokens.JWT/\">System.IdentityModel.Tokens.JWT</a>\n                        <p>\n                            This includes types that provide support for creating, serializing and validating JSON Web Tokens.                        \n                        </p>\n                    </li>\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.JwtBearer/\">Microsoft.AspNetCore.Authentication.JwtBearer</a>\n                        <p>\n                            This package is a ASP.NET Core middleware that enables an application to receive an OpenID Connect bearer token.                        \n                        </p>\n                    </li>\n                    <li>\n                        <a href=\"http://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.OpenIdConnect/\">Microsoft.AspNetCore.Authentication.OpenIdConnect</a>\n                        <p>\n                            ASP.NET Core middleware that provide support to the OpenID Connect authentication workflow in ASP.NET Core applications.                       \n                        </p>\n                    </li>\n                    \n                    \n                </ul>\n\n                <p class=\"article-header\">\n                    Identity Classes and Identity DbContext\n                </p>\n\n                <p class=\"article-paragraph\">\n                    The Identity package we installed provides us with a IdentityUser class that we can utilize for our application users. It has lots different fields or properties including password hash, timestamp we can use in our app to capture a detail about users.\n                    We will add a class AppUser in our application inside the directory Core/Entities which will derive from the IdentityUser. AppUser class contains additional fields like DisplayName and Address about the Users that we can store. The AppUser and Address will have a one-to-one relationship. \n                </p>\n\n                <p class=\"article-paragraph\">\n                    Next, we will add a DbContext for managing Identity related data in our database. The IdentityDbContext will be different from our ApplicationDbContext that we will use for our application related data, and it will derive from the IdentityDbContext class provided by the Identity.\n                    Like our application DbContext, this will allows us to query the identity related data and the database will contain different Identity tables. \n                    We will add a constructor in IdentityDbContext class and pass a option field that will derive from base class. \n                    We need to specify AppIdentiyDbContext in our constructor option property as we have two different DbContext.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    Then, we will add this as a service in the Startup.cs class so we can use the IdentityDbContext as a service as needed in our application. \n                    And configure it by providing database connection string. So, we will modify our startup class as below and we will also add a connection string for the Identity Db in the appsettings.json file.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet1}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    App Settings for the SqlLite database.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet3}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Also, we have to pass our AppUser class to the IdentityDbContext so that it will create the AppUser table.\n                    So, the AppIdentiyDbContext class will look like this.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet2}}\n        \n                    </code>\n                </pre>\n\n\n                <p class=\"article-header\">\n                    Setup Identity Database\n                </p>\n\n                <p class=\"article-paragraph\">\n                    Now that we have our DbContext for the Identity setup in our application, we will need to setup the Identity database.\n                    To do this, we will add a new migration for Identity which will create the database and seed the database with an Example user to work with.\n                    As we can see in the Startup class, we are using the SqlLite database, as it is simpler and good for testing. \n                    This can be changed to any database based on preference, to work with Identity.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    So, to create a new migration we will run the following command in the dotnet CLI.\n                    We need to specify the Identity Context using -c annotation, to use for migration as we have two different DbContext in our application.\n                    And we can specify the output directory where we want our migration files to be added. In this case we have specified to have it as seperate folder from our AppdbContext, under Identity/Migrations.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet4}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    After running this command, we can see the new migration files that are added and examine different Identity tables with their properties in the 2022..._IdentityInitial.cs file.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    We will work with a sample user to test our Identity Authentication so now we need to seed our Identity database with the example user.\n                    Adding a AppIdentityDbContextSeed under the same directory as AppIdentityDbContext.cs, Identity/Migration, will seed our Identity database with the test user.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    AppIdentityDbContextSeed.cs file\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet5}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    In the seed file, we are using Identity services such as UserManager to create a new user and seed our db.\n                    In order to use this Identity service and other identity services in our application, we need to configure our startup class with the require identity services.\n                    So we will modify our startup class. Our identity configuration can get large so its a good practice to make use of extension class for startup.\n                    We will use an extension class to include the Identity related configuration such as configuring Identity system with our AppUser, signInManager and using EF for datastore.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    The extension class for Identity related services.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet7}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Then we will pass this class to our startup file.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet8}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-header\">\n                    Account Controller with Login and Register\n                </p>\n\n                <p class=\"article-paragraph\">\n                    Now that we have setup the identity related services, we can create the Identity database based on our initial migration and seed the db with the sample user as in AppIdentityContextSeedFile.\n                    To do this, we will need to modify our program class.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet9}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    We can see in the above program file, we have modified the main method to use logger using Microsoft.Logging to address issues while seeding the databases.\n                    We also have two databases, one for the Application, StoreContext and IdentityDbContext for identity. So we have created seperate migrations and seed the identity related data based on the IdentitySeed file.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    With the Identity related configuration and database setup/seeding in place, we can run our application using dotnet cli, to apply the identity related migrations and create the identity database with seed data.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    After running the app, we should see the SqlLite Identity database is added on the root directory. This can be accessed using SqlLite Explorer in VsCode.\n                    We can see all the identity related tables and the AspNetUser table with the seed user data. The AspNetUser table will look like below. It will contain all the identity properties from IdentityUser class such as PasswordHash, TwoFactorEnabled, EmailConfirmed and other properties.\n                </p>\n\n                <img src=\"assets/AspNetUser-table.png\" class=\"userTable_img\" alt=\"User\">\n\n                <p class=\"article-paragraph\">\n                    So far we have completed setting up the application to use Identity and configured the database with initial migration/schema.\n                    Great, Now we are ready to add API endpoints for users account register and login. \n                    Let us add an AccountController in our application with two POST methods to allow users to register and login to our app.\n                    We will leave the token creation for now and come back to it later. So, the AccountController is going to look like below.\n\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet10}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    Our AccountController is dependent on UserManager and SignInManager from Identity so we have passed those as a parameter in our constructor.\n                    These dependencies are responsible in our application to find users that are registered in our db using their email, and signInManager is responsible to verify the user password that is provided in login.\n                    As we can see in the Login method above, signInManager.CheckPasswordSignInAsync, we are passing password in parameters including false for lockoutOnFailure property. \n                    This property can be used to lockout users on multiple attempts with incorrect password. We will not use this Identity feature so just set it to false.\n                    We are passing a sample token to our client apps to access our API resources for now, which we will change it to real token.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    We should be able to login to our application with a seed user we created earlier. Testing the Login method using Postman will give us the following success result.\n                </p>\n\n                <img src=\"assets/Auth2.png\" class=\"userTable_img\" alt=\"User\">\n\n                <p class=\"article-paragraph\">\n                    Similarly, using the Identity built in methods, we can create a POST Register method to allow users to register to use our app.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet11}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    After adding a user using the above Register method, we should be able to login with the user we registered.\n                </p>\n\n                <img src=\"assets/Auth3.png\" class=\"userTable_img\" alt=\"User\">\n\n                <p class=\"article-header\">\n                    Generating a JWT Token\n                </p>\n\n                <p class=\"article-paragraph\">\n                    Now we will add a functionality to create a JSON Web token and pass it to client applications. \n                    JWT tokens are encoded string which is not human readable and we can decode a JWT token and view information about a user and token. \n                    We can use the JWT.IO website to decode a JWT token and it will display a result from the token that can be read.\n                    \n                </p>\n\n                <p class=\"article-paragraph\">\n                    According to the website jwt.io, JSON web tokens are an open, industry standard for representing claims securely between two parties.\n                    It contains claims about users that the server will add when generating a token. Claims contain basic information such as username, token issued date etc. and a signature generated by a server.\n                    These claims can be later verified by the server when a client request access to the server app. \n                    The decoded token will contain information in three parts - Header which is Algorithm and Token type, Payload -- Claim about users and data, and a Signature.\n                    The signature will be created by the server and it will be used later to verify the token using a symmetric key.\n                    The same symmetric key will be used to encode and decode the token.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    To create a jwt token, we will add an ITokenService and TokenService in our application which will handle the token creation.\n                    The code for the service will look like below. In the CreateToken method we can see that we have added claims about users and created a signature using our token key from the config.\n                    We have also added a token validity time and issuer information.\n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet12}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-header\">\n                    Verifying token \n                </p>\n\n                <p class=\"article-paragraph\">\n                    Next, we will modify the startup extension class for Identity, IdentityServiceExtension. \n                    This extension will start all the required identity services. \n                    Here, we can also add Identity Authentication service. \n                    In the code, we have configured it to use JWT Bearer defaults scheme and added a way to validate a token passed by clients.\n                    we are using the token key and token issuer to verify the signature and the server. \n                </p>\n\n                <pre class=\"code\">\n                    <code class=\"code-block\">\n                      {{snippet12}}\n        \n                    </code>\n                </pre>\n\n                <p class=\"article-paragraph\">\n                    After configuring the Identity authentication service, we need to use the authentication middleware in our application based on the configuration.\n                    So, we added app.UseAuthentication() just before Authorization middleware in our Startup class.\n                    We will also need to add the Token key and Issuer in our config, appsettings.json file as we are using them to create and verify the token.\n                </p>\n\n                <p class=\"article-paragraph\">\n                    That's it! We have added all the code to implement JWT token based Authentication in our application.\n                    We are ready to test the Authentication feature now. After user is logged in successfully, s/he should recieve a JWT token from our server.\n                    This token should be successfully verified.\n                </p>\n\n\n                <div class=\"comments\">\n                    <disqus [identifier]=\"pageId\"></disqus>\n                </div>\n\n\n\n\n\n            </div>\n        </div>\n\n\n    </div>\n</article>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatStepperModule} from '@angular/material/stepper';\n\n\nconst materialModules = [\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSnackBarModule,\n    MatStepperModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatButtonToggleModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    MatBadgeModule,\n    MatGridListModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatTooltipModule,\n    MatDialogModule\n  ];\n  \n  @NgModule({\n    imports: [\n      CommonModule,\n      ...materialModules\n    ],\n    exports: [\n      ...materialModules\n    ],\n  })\n  \n  export class AngularMaterialModule { }","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  { path: 'nav-bar', loadChildren: () => import('./nav-bar/nav-bar.module').then(m => m.NavBarModule) },\n  { path: 'home', loadChildren: () => import('./home-page/home-page.module').then(m => m.HomePageModule) },\n  { path: 'blog1', loadChildren: () => import('./blogs/ang-mat-dialog/ang-mat-dialog.module').then(m => m.AngMatDialogModule) },\n  { path: 'angular-directive-blog', loadChildren: () => import('./blogs/ang-directive/ang-directive.module').then(m => m.AngDirectiveModule) },\n  { path: 'blog3', loadChildren: () => import('./blogs/super-wifi-article/super-wifi-article.module').then(m => m.SuperWifiArticleModule) },\n  { path: 'blog4', loadChildren: () => import('./blogs/ang-test-jest/ang-test-jest.module').then(m => m.AngTestJestModule) },\n  { path: 'test-table', loadChildren: () => import('./test-product-component/test-product.module').then(m => m.TestProductModule) },\n  { path: 'asp-net-auth', loadChildren: () => import('./blogs/asp-net-auth-identity/asp-net-auth-identity.module').then(m => m.AspNetAuthIdentityModule)},\n  { path: 'asp-net-uiajax', loadChildren: () => import('./blogs/aspnet-uiajax/aspnet-uiajax.module').then(m => m.AspNetUiAjaxModule)}\n\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}